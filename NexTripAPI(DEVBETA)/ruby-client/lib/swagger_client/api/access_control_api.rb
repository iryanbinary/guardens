=begin
#MetroTransit NexTrip API (BETA)

#***    - BETA release of an OAuth protected iteration of the metrotransit Bus Routes API   - @iryanb (For Dev and Test Use Only, All Rights Reserved (c) 10.23.2017)  ***  ## MetroTransit NexTrip API (BETA)  ***    - Currently this API permits 2 requests per minute for anonymous API clients    - In a future release this API will offer rate limits for OAuth clients   - OAuth 2.0 AccessCode Tokens Scopes           - routes:all                  Grants read access to all routes       - routes:express              Grants read access to only express routes       - routes:local                Grants read access to local routes    # GET /NexTrip/{ROUTE}/{DIRECTION}/{STOP}    - GET TIMEPOINT DEPARTURES   - To make a valid request specify the integer values of the Route ID, Direction, and the Bus Stop ID as path parameters   - Without an Accept Header the default response schema is XML, for JSON set the Accept header to application/json       # GET /NexTrip/{STOPID}      - GET DEPARTURES   - This operation is used to return a list of departures scheduled for any given bus stop.    - A StopID is an integer value identifying any one of the many thousands of bus stops in the metro.    - Stop information can be derived from the GTFS schedule data updated weekly for public use.    - datafinder.org/metadata/transit_schedule_google_feed.html    # GET /NexTrip/Directions/{ROUTE}    - GET DIRECTIONS   - Returns the two directions that are valid for a given route. Either North/South or East/West.    - The result includes text/value pair with the direction name and an ID.    - Directions are identified with an ID value. 1 = South, 2 = East, 3 = West, 4 = North.     # GET /NexTrip/Providers    - GET PROVIDERS   - Returns a list of area Transit providers.    - Providers are identified in the list of Routes allowing routes to be selected for a single provider.     # GET /NexTrip/Routes    - GET ROUTES    - Returns a list of Transit routes that are in service on the current day.    # GET /NexTrip/Stops/{ROUTE}/{DIRECTION}    - GET STOPS   - Returns a list of Timepoint stops for the given Route/Direction.    - The result includes text/value pairs with the stop description and a 4 character stop (or node) identifier.     # GET /NexTrip/VehicleLocations/{ROUTE}    - GET VEHICLE LOCATIONS   - This operation returns a list of vehicles currently in service that have recently (within 5 minutes)    - reported their locations. A route paramter is used to return results for the given route.    - Use \"0\" for the route parameter to return a list of all vehicles in service.     ***    # POST /NexTrip/update/Routes (Future API Enhancement)       - This API operation requires an admin_AccessCode Token with one of the following scopes           - admin_updateroutes    - The POST message body must be a properly formatted JSON object with the following fields         ```                    {               \"Route\":\"integerRouteID\",                \"ProviderID\":\"integerProviderID\",                \"duration\":\"integerMinutes\",                \"stops\":[{\"Text\":\"stringStopName\", \"Value\":\"stringStopID\"},{\"Text\":\"stringStopName\", \"Value\":\"stringStopID\"}]               \"numberofstops\":\"integerStops\",                \"express\":\"True or False\",                \"Description\":\"Details about the route\"             }                    ```  ## Security Definitions        ***   # AccessCode        - Web and Mobile Authenticated Users              - routes:all                  Grants read access to all routes         - routes:express              Grants read access to only express routes         - routes:local                Grants read access to local routes         - readpublic_key              List and view details for public keys             ***   # MobileApp_Implicit     - Implicitly Trusted Mobile App with Anonymous User           - readpublic_key              List and view details for public keys            ***   # admin_AccessCode     - administrative purposes          - admin_updateroutes          Grants write access to routes data         - admin_writepublic_key       Create, list, and view details for public keys         - admin_public_key            Fully manage PKI keys    *** 

OpenAPI spec version: BETA

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class AccessControlApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Request a temporary code for the desired API Access Token Scope(s)
    # @param grant_type value &#x3D; authorization_code
    # @param client_id a valid OAuth2 client id registered to the app authorized to use the API is required (this changes with each app store version iteration)
    # @param redirect_uri App Callback URI
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_auth_code(grant_type, client_id, redirect_uri, opts = {})
      data, _status_code, _headers = get_auth_code_with_http_info(grant_type, client_id, redirect_uri, opts)
      return data
    end

    # 
    # Request a temporary code for the desired API Access Token Scope(s)
    # @param grant_type value &#x3D; authorization_code
    # @param client_id a valid OAuth2 client id registered to the app authorized to use the API is required (this changes with each app store version iteration)
    # @param redirect_uri App Callback URI
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_auth_code_with_http_info(grant_type, client_id, redirect_uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccessControlApi.get_auth_code ..."
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling AccessControlApi.get_auth_code"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccessControlApi.get_auth_code"
      end
      # verify the required parameter 'redirect_uri' is set
      if @api_client.config.client_side_validation && redirect_uri.nil?
        fail ArgumentError, "Missing the required parameter 'redirect_uri' when calling AccessControlApi.get_auth_code"
      end
      # resource path
      local_var_path = "/NexTrip/oauth20/authorize"

      # query parameters
      query_params = {}
      query_params[:'grant_type'] = grant_type
      query_params[:'client_id'] = client_id
      query_params[:'redirect_uri'] = redirect_uri

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode', 'MobileApp_Implicit', 'admin_AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessControlApi#get_auth_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Applications request an implicit token with a client id and secret prior to user authentication
    # @param grant_type value &#x3D; implicit
    # @param client_id a valid  OAuth2 client id registered to the app authorized to use the API is required (this changes with each app store version iteration)
    # @param client_secret the client secret associated to the app client id (this changes with each app store version iteration)
    # @param [Hash] opts the optional parameters
    # @return [OAuthToken]
    def get_token_request(grant_type, client_id, client_secret, opts = {})
      data, _status_code, _headers = get_token_request_with_http_info(grant_type, client_id, client_secret, opts)
      return data
    end

    # 
    # Applications request an implicit token with a client id and secret prior to user authentication
    # @param grant_type value &#x3D; implicit
    # @param client_id a valid  OAuth2 client id registered to the app authorized to use the API is required (this changes with each app store version iteration)
    # @param client_secret the client secret associated to the app client id (this changes with each app store version iteration)
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthToken, Fixnum, Hash)>] OAuthToken data, response status code and response headers
    def get_token_request_with_http_info(grant_type, client_id, client_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccessControlApi.get_token_request ..."
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling AccessControlApi.get_token_request"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling AccessControlApi.get_token_request"
      end
      # verify the required parameter 'client_secret' is set
      if @api_client.config.client_side_validation && client_secret.nil?
        fail ArgumentError, "Missing the required parameter 'client_secret' when calling AccessControlApi.get_token_request"
      end
      # resource path
      local_var_path = "/NexTrip/oauth20/token"

      # query parameters
      query_params = {}
      query_params[:'grant_type'] = grant_type
      query_params[:'client_id'] = client_id
      query_params[:'client_secret'] = client_secret

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode', 'MobileApp_Implicit', 'admin_AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OAuthToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessControlApi#get_token_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Authorization Code grant types require a POST to the token endpoint after a GET for Authorization code.
    # @param [Hash] opts the optional parameters
    # @return [OAuthToken]
    def post_token_request(opts = {})
      data, _status_code, _headers = post_token_request_with_http_info(opts)
      return data
    end

    # 
    # Authorization Code grant types require a POST to the token endpoint after a GET for Authorization code.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OAuthToken, Fixnum, Hash)>] OAuthToken data, response status code and response headers
    def post_token_request_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccessControlApi.post_token_request ..."
      end
      # resource path
      local_var_path = "/NexTrip/oauth20/token"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode', 'MobileApp_Implicit', 'admin_AccessCode']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'OAuthToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessControlApi#post_token_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
