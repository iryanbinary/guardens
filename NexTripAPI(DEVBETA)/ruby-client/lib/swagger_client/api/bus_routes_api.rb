=begin
#MetroTransit NexTrip API (BETA)

#***    - BETA release of an OAuth protected iteration of the metrotransit Bus Routes API   - @iryanb (For Dev and Test Use Only, All Rights Reserved (c) 10.23.2017)  ***  ## MetroTransit NexTrip API (BETA)  ***    - Currently this API permits 2 requests per minute for anonymous API clients    - In a future release this API will offer rate limits for OAuth clients   - OAuth 2.0 AccessCode Tokens Scopes           - routes:all                  Grants read access to all routes       - routes:express              Grants read access to only express routes       - routes:local                Grants read access to local routes    # GET /NexTrip/{ROUTE}/{DIRECTION}/{STOP}    - GET TIMEPOINT DEPARTURES   - To make a valid request specify the integer values of the Route ID, Direction, and the Bus Stop ID as path parameters   - Without an Accept Header the default response schema is XML, for JSON set the Accept header to application/json       # GET /NexTrip/{STOPID}      - GET DEPARTURES   - This operation is used to return a list of departures scheduled for any given bus stop.    - A StopID is an integer value identifying any one of the many thousands of bus stops in the metro.    - Stop information can be derived from the GTFS schedule data updated weekly for public use.    - datafinder.org/metadata/transit_schedule_google_feed.html    # GET /NexTrip/Directions/{ROUTE}    - GET DIRECTIONS   - Returns the two directions that are valid for a given route. Either North/South or East/West.    - The result includes text/value pair with the direction name and an ID.    - Directions are identified with an ID value. 1 = South, 2 = East, 3 = West, 4 = North.     # GET /NexTrip/Providers    - GET PROVIDERS   - Returns a list of area Transit providers.    - Providers are identified in the list of Routes allowing routes to be selected for a single provider.     # GET /NexTrip/Routes    - GET ROUTES    - Returns a list of Transit routes that are in service on the current day.    # GET /NexTrip/Stops/{ROUTE}/{DIRECTION}    - GET STOPS   - Returns a list of Timepoint stops for the given Route/Direction.    - The result includes text/value pairs with the stop description and a 4 character stop (or node) identifier.     # GET /NexTrip/VehicleLocations/{ROUTE}    - GET VEHICLE LOCATIONS   - This operation returns a list of vehicles currently in service that have recently (within 5 minutes)    - reported their locations. A route paramter is used to return results for the given route.    - Use \"0\" for the route parameter to return a list of all vehicles in service.     ***    # POST /NexTrip/update/Routes (Future API Enhancement)       - This API operation requires an admin_AccessCode Token with one of the following scopes           - admin_updateroutes    - The POST message body must be a properly formatted JSON object with the following fields         ```                    {               \"Route\":\"integerRouteID\",                \"ProviderID\":\"integerProviderID\",                \"duration\":\"integerMinutes\",                \"stops\":[{\"Text\":\"stringStopName\", \"Value\":\"stringStopID\"},{\"Text\":\"stringStopName\", \"Value\":\"stringStopID\"}]               \"numberofstops\":\"integerStops\",                \"express\":\"True or False\",                \"Description\":\"Details about the route\"             }                    ```  ## Security Definitions        ***   # AccessCode        - Web and Mobile Authenticated Users              - routes:all                  Grants read access to all routes         - routes:express              Grants read access to only express routes         - routes:local                Grants read access to local routes         - readpublic_key              List and view details for public keys             ***   # MobileApp_Implicit     - Implicitly Trusted Mobile App with Anonymous User           - readpublic_key              List and view details for public keys            ***   # admin_AccessCode     - administrative purposes          - admin_updateroutes          Grants write access to routes data         - admin_writepublic_key       Create, list, and view details for public keys         - admin_public_key            Fully manage PKI keys    *** 

OpenAPI spec version: BETA

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class BusRoutesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Returns a list of departures scheduled for any given bus stop.
    # @param stopid Specify the value of the Bus Stop ID as an abbreviated string
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_departures(stopid, opts = {})
      data, _status_code, _headers = get_departures_with_http_info(stopid, opts)
      return data
    end

    # 
    # Returns a list of departures scheduled for any given bus stop.
    # @param stopid Specify the value of the Bus Stop ID as an abbreviated string
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_departures_with_http_info(stopid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_departures ..."
      end
      # verify the required parameter 'stopid' is set
      if @api_client.config.client_side_validation && stopid.nil?
        fail ArgumentError, "Missing the required parameter 'stopid' when calling BusRoutesApi.get_departures"
      end
      # resource path
      local_var_path = "/NexTrip/{STOPID}".sub('{' + 'STOPID' + '}', stopid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_departures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the two directions that are valid for a given route.
    # @param route Sepcify the Route ID as an integer.
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_directions(route, opts = {})
      data, _status_code, _headers = get_directions_with_http_info(route, opts)
      return data
    end

    # 
    # Returns the two directions that are valid for a given route.
    # @param route Sepcify the Route ID as an integer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_directions_with_http_info(route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_directions ..."
      end
      # verify the required parameter 'route' is set
      if @api_client.config.client_side_validation && route.nil?
        fail ArgumentError, "Missing the required parameter 'route' when calling BusRoutesApi.get_directions"
      end
      # resource path
      local_var_path = "/NexTrip/Directions/{ROUTE}".sub('{' + 'ROUTE' + '}', route.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_directions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of area Transit providers.  Providers are identified in the list of Routes allowing routes to be selected for a single provider. 
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_providers(opts = {})
      data, _status_code, _headers = get_providers_with_http_info(opts)
      return data
    end

    # 
    # Returns a list of area Transit providers.  Providers are identified in the list of Routes allowing routes to be selected for a single provider. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_providers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_providers ..."
      end
      # resource path
      local_var_path = "/NexTrip/Providers"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of Transit routes that are in service on the current day.
    # @param [Hash] opts the optional parameters
    # @return [RouteData]
    def get_routes(opts = {})
      data, _status_code, _headers = get_routes_with_http_info(opts)
      return data
    end

    # 
    # Returns a list of Transit routes that are in service on the current day.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RouteData, Fixnum, Hash)>] RouteData data, response status code and response headers
    def get_routes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_routes ..."
      end
      # resource path
      local_var_path = "/NexTrip/Routes"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RouteData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns a list of Timepoint stops for the given Route/Direction.
    # @param route Sepcify the Route ID as an integer.
    # @param direction Specify the direction as an integer.  1 (South), 2 (East), 3 (West), 4 (North)
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_stops(route, direction, opts = {})
      data, _status_code, _headers = get_stops_with_http_info(route, direction, opts)
      return data
    end

    # 
    # Returns a list of Timepoint stops for the given Route/Direction.
    # @param route Sepcify the Route ID as an integer.
    # @param direction Specify the direction as an integer.  1 (South), 2 (East), 3 (West), 4 (North)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_stops_with_http_info(route, direction, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_stops ..."
      end
      # verify the required parameter 'route' is set
      if @api_client.config.client_side_validation && route.nil?
        fail ArgumentError, "Missing the required parameter 'route' when calling BusRoutesApi.get_stops"
      end
      # verify the required parameter 'direction' is set
      if @api_client.config.client_side_validation && direction.nil?
        fail ArgumentError, "Missing the required parameter 'direction' when calling BusRoutesApi.get_stops"
      end
      # resource path
      local_var_path = "/NexTrip/Stops/{ROUTE}/{DIRECTION}".sub('{' + 'ROUTE' + '}', route.to_s).sub('{' + 'DIRECTION' + '}', direction.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_stops\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns the scheduled departures for a selected route, direction and timepoint stop.
    # @param route Sepcify the Route ID as an integer.
    # @param direction Specify the direction as an integer.  1 (South), 2 (East), 3 (West), 4 (North)
    # @param stop Specify the value of the Bus Stop ID as an abbreviated string
    # @param [Hash] opts the optional parameters
    # @return [TimePoints]
    def get_timepoint_departures(route, direction, stop, opts = {})
      data, _status_code, _headers = get_timepoint_departures_with_http_info(route, direction, stop, opts)
      return data
    end

    # 
    # Returns the scheduled departures for a selected route, direction and timepoint stop.
    # @param route Sepcify the Route ID as an integer.
    # @param direction Specify the direction as an integer.  1 (South), 2 (East), 3 (West), 4 (North)
    # @param stop Specify the value of the Bus Stop ID as an abbreviated string
    # @param [Hash] opts the optional parameters
    # @return [Array<(TimePoints, Fixnum, Hash)>] TimePoints data, response status code and response headers
    def get_timepoint_departures_with_http_info(route, direction, stop, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_timepoint_departures ..."
      end
      # verify the required parameter 'route' is set
      if @api_client.config.client_side_validation && route.nil?
        fail ArgumentError, "Missing the required parameter 'route' when calling BusRoutesApi.get_timepoint_departures"
      end
      # verify the required parameter 'direction' is set
      if @api_client.config.client_side_validation && direction.nil?
        fail ArgumentError, "Missing the required parameter 'direction' when calling BusRoutesApi.get_timepoint_departures"
      end
      # verify the required parameter 'stop' is set
      if @api_client.config.client_side_validation && stop.nil?
        fail ArgumentError, "Missing the required parameter 'stop' when calling BusRoutesApi.get_timepoint_departures"
      end
      # resource path
      local_var_path = "/NexTrip/{ROUTE}/{DIRECTION}/{STOP}".sub('{' + 'ROUTE' + '}', route.to_s).sub('{' + 'DIRECTION' + '}', direction.to_s).sub('{' + 'STOP' + '}', stop.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TimePoints')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_timepoint_departures\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This operation returns a list of vehicles currently in service that have recently (within 5 minutes)  reported their locations. A route paramter is used to return results for the given route.  Use \"0\" for the route parameter to return a list of all vehicles in service.
    # @param route Sepcify the Route ID as an integer.
    # @param [Hash] opts the optional parameters
    # @return [Success]
    def get_vehicle_locations(route, opts = {})
      data, _status_code, _headers = get_vehicle_locations_with_http_info(route, opts)
      return data
    end

    # 
    # This operation returns a list of vehicles currently in service that have recently (within 5 minutes)  reported their locations. A route paramter is used to return results for the given route.  Use \&quot;0\&quot; for the route parameter to return a list of all vehicles in service.
    # @param route Sepcify the Route ID as an integer.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Success, Fixnum, Hash)>] Success data, response status code and response headers
    def get_vehicle_locations_with_http_info(route, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BusRoutesApi.get_vehicle_locations ..."
      end
      # verify the required parameter 'route' is set
      if @api_client.config.client_side_validation && route.nil?
        fail ArgumentError, "Missing the required parameter 'route' when calling BusRoutesApi.get_vehicle_locations"
      end
      # resource path
      local_var_path = "/NexTrip/VehicleLocations/{ROUTE}".sub('{' + 'ROUTE' + '}', route.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AccessCode']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Success')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BusRoutesApi#get_vehicle_locations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
